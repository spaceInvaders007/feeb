on || 15) * 1000) + 2000;
      stopTimeoutRef.current = setTimeout(
        stopRecording,
        durationMs
      );
    } catch (err: any) {
      DebugLogger.error("RECORDING", "start error", err);
      isActivelyRecordingRef.current = false;
      setIsRecording(false);
      Alert.alert("Recording Error", err.message || "");
    }
  }, [player]);

  // Stop recording callback
  const stopRecording = useCallback(async () => {
    DebugLogger.log("RECORDING", "stopRecording");
    if (!isActivelyRecordingRef.current) return;

    isActivelyRecordingRef.current = false;
    setIsRecording(false);
    setIsSaving(true);
    if (stopTimeoutRef.current) {
      clearTimeout(stopTimeoutRef.current);
      stopTimeoutRef.current = null;
    }

    try {
      if (Platform.OS === "web") {
        // wait briefly for blob
        await new Promise((r) => setTimeout(r, 1000));
        if (webRecordingBlobRef.current) {
          await saveWebRecording(webRecordingBlobRef.current);
        } else {
          throw new Error("No web blob recorded");
        }
      } else {
        cameraRef.current?.stopRecording();
        const rec = await recordingRef.current!;
        if (
          rec?.uri &&
          (await validateRecordingFile(rec.uri))
        ) {
          await saveMobileRecording(rec);
        } else {
          throw new Error("Invalid recording file");
        }
      }
    } catch (err: any) {
      DebugLogger.error("RECORDING", "stop/save error", err);
      Alert.alert("Save Error", err.message || "");
    } finally {
      setIsSaving(false);
      webRecordingBlobRef.current = null;
      recordingRef.current = null;
      recordingStartTimeRef.current = null;
      setTimeout(() => navigation.goBack(), 1000);
    }
  }, [navigation]);

  // Helpers to save
  const saveMobileRecording = useCallback(
    async (recording: any) => {
      const permanentUri =
        await FeebStorage.saveVideoToPermanentLocation(
          recording.uri
        );
      const newFeeb = FeebStorage.createFeeb(
        permanentUri,
        videoUri
      );
      await FeebStorage.saveFeeb(newFeeb);
      Alert.alert("Success!", "Your reaction has been saved!");
    },
    [videoUri]
  );
  const saveWebRecording = useCallback(
    async (blob: Blob) => {
      const id = await FeebStorage.saveWebVideoBlob(blob);
      const newFeeb = FeebStorage.createFeeb(id, videoUri);
      await FeebStorage.saveFeeb(newFeeb);
      Alert.alert("Success!", "Your reaction has been saved!");
    },
    [videoUri]
  );

  const handleWebRecordingComplete = useCallback(
    (videoBlob: Blob) => {
      webRecordingBlobRef.current = videoBlob;
    },
    []
  );
  const handleCameraReady = useCallback(() => {
    setCameraReady(true);
  }, []);

  const nativeReady =
    cameraPermission?.granted && micPermission?.granted;
  const allReady =
    videoReady &&
    (Platform.OS === "web" ? cameraReady : nativeReady);

  return (
    <View style={styles.container}>
      {/* Back button */}
      <TouchableOpacity
        style={styles.backButton}
        onPress={() => navigation.goBack()}
        disabled={isRecording || isSaving}
      >
        <View
          style={[
            styles.backButtonCircle,
            (isRecording || isSaving) &&
              styles.disabledButton,
          ]}
        >
          <Ionicons
            name="arrow-back"
            size={24}
            color="#fff"
          />
        </View>
      </TouchableOpacity>

      {/* Recording indicator */}
      {isRecording && (
        <View style={styles.recordingIndicator}>
          <View style={styles.redDot} />
          <Text style={styles.recordingText}>REC</Text>
          <TouchableOpacity
            style={styles.manualStopButton}
            onPress={stopRecording}
          >
            <Ionicons
              name="stop"
              size={20}
              color="#fff"
            />
          </TouchableOpacity>
        </View>
      )}

      {/* Original video */}
      <View style={styles.half}>
        <VideoView
          style={styles.video}
          player={player}
          allowsFullscreen={false}
          allowsPictureInPicture={false}
          showsTimecodes={false}
        />
      </View>

      {/* Camera or WebCamera */}
      <View style={styles.half}>
        {Platform.OS === "web" ? (
          <WebCamera
            isRecording={isRecording}
            onCameraReady={handleCameraReady}
            onRecordingComplete={handleWebRecordingComplete}
          />
        ) : (
          <CameraView
            ref={cameraRef}
            style={StyleSheet.absoluteFillObject}
            facing="front"
            mode="video"
            videoQuality="720p"
            onCameraReady={handleCameraReady}
          />
        )}
      </View>

      {/* Overlays */}
      {!allReady && (

      <View style={styles.overlay}>
          <ActivityIndicator size="large" color="#00CFFF" />
          <Text style={styles.loadingText}>Loading...</Text>
        </View>
      )}
      {countdown !== null && (
        <View style={styles.overlay}>
          <Text style={styles.countdownText}>
            {countdown}
          </Text>
        </View>
      )}
      {isSaving && (
        <View style={styles.overlay}>
          <ActivityIndicator size="large" color="#00CFFF" />
          <Text style={styles.loadingText}>
            Saving your feeb...
          </Text>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#000" },
  half: { flex: 1, overflow: "hidden", backgroundColor: "#000" },
  video: {
    flex: 1,
    width: screenWidth,
    backgroundColor: "#000",
  },
  backButton: {
    position: "absolute",
    top: 50,
    left: 20,
    zIndex: 1000,
  },
  backButtonCircle: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  disabledButton: { opacity: 0.5 },
  recordingIndicator: {
    position: "absolute",
    top: 50,
    right: 20,
    zIndex: 1000,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.7)",
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  redDot: {
    width: 16,
    height: 16,
    borderRadius: 8,
    backgroundColor: "#ff0000",
    marginRight: 8,
  },
  recordingText: {
    color: "#ff0000",
    fontSize: 14,
    fontWeight: "bold",
    marginRight: 8,
  },
  manualStopButton: {
    backgroundColor: "rgba(255, 0, 0, 0.8)",
    padding: 6,
    borderRadius: 15,
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: "rgba(0, 0, 0, 0.7)",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 999,
  },
  loadingText: {
    color: "#fff",
    marginTop: 16,
    fontSize: 16,
  },
  countdownText: {
    fontSize: 120,
    color: "#fff",
    fontWeight: "bold",
    textAlign: "center",
  },
});


// File: screens/UploadContentScreen.tsx
// screens/UploadContentScreen.tsx
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';

export default function UploadContentScreen() {
  const handleUpload = () => {
    alert('Here you would pick a video from device or record new content.');
  };

  return (
    <View style={styles.container}>
      <Ionicons name="cloud-upload" size={64} color="#00CFFF" />
      <Text style={styles.title}>Upload a Video</Text>
      <Text style={styles.description}>
        Choose a video from your phone or record one to share with others.
      </Text>
      <TouchableOpacity style={styles.button} onPress={handleUpload}>
        <Text style={styles.buttonText}>Select Video</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32,
  },
  title: {
    fontSize: 24,
    marginTop: 20,
    fontWeight: 'bold',
  },
  description: {
    marginTop: 12,
    textAlign: 'center',
    color: '#666',
  },
  button: {
    marginTop: 24,
    backgroundColor: '#00CFFF',
    paddingVertical: 14,
    paddingHorizontal: 32,
    borderRadius: 8,
  },
  buttonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 16,
  },
});


// File: app.json
{
  "expo": {
    "name": "feeb",
    "slug": "feeb",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "edgeToEdgeEnabled": true,
      "permissions": [
        "CAMERA",
        "RECORD_AUDIO",
        "WRITE_EXTERNAL_STORAGE"
      ]
    },
    "web": {
      "favicon": "./assets/favicon.png"
    }
  }
}


// File: .expo/devices.json
{
  "devices": []
}


// File: .expo/README.md
> Why do I have a folder named ".expo" in my project?
The ".expo" folder is created when an Expo project is started using "expo start" command.
> What do the files contain?
- "devices.json": contains information about devices that have recently opened this project. This is used to populate the "Development sessions" list in your development builds.
- "settings.json": contains the server configuration that is used to serve the application manifest.
> Should I commit the ".expo" folder?
No, you should not share the ".expo" folder. It does not contain any information that is relevant for other developers working on the project, it is specific to your machine.
Upon project creation, the ".expo" folder is already added to your ".gitignore" file.


// File: App.tsx
// App.tsx
import RootNavigator from './navigation/RootNavigator';

export default function App() {
  return <RootNavigator />;
}
